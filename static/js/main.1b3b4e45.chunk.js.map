{"version":3,"sources":["features/dateSlice.js","components/Calendar/CalendarPicker.js","components/Motto/Motto.js","components/Banner/Banner.js","components/Item/Item.js","components/List/List.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["initialList","localStorage","getItem","JSON","parse","dateSlice","createSlice","name","initialState","date","Date","list","reducers","changeDate","state","action","payload","addItem","newItem","id","uuid","title","toUpperCase","push","setItem","stringify","filteredList","filter","item","toString","console","log","filtered","dateList","removeItem","editItem","find","actions","selectDate","selectList","CalendarPicker","dispatch","useDispatch","useSelector","onChange","newDate","onClickDay","event","className","value","Motto","useState","quote","setquote","useEffect","a","fetch","then","res","json","data","randomObject","Math","floor","random","length","Object","values","fetchMotto","Banner","Item","forwardRef","ref","done","setDone","edit","setEdit","input","setInput","toggleHandler","itemAdd","useSpring","from","marginTop","to","style","type","placeholder","e","target","preventDefault","onClick","editHandlerOpen","disabled","removeHandler","List","map","App","alert","configureStore","reducer","dateReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1b3b4e45.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { v4 as uuid } from 'uuid';\n\nconst initialList = localStorage.getItem('list') ? JSON.parse(localStorage.getItem('list')) : [];\n\nexport const dateSlice = createSlice({\n\tname: 'date',\n\tinitialState: {\n\t\tdate: new Date(),\n\t\tlist: [],\n\t\tlist: initialList,\n\t\tfiltered: [],\n\t\tafterRemove: [],\n\t\teditoo: []\n\t},\n\treducers: {\n\t\tchangeDate: (state, action) => {\n\t\t\tstate.date = action.payload;\n\t\t},\n\t\taddItem: (state, action) => {\n\t\t\tconst newItem = { id: uuid(), date: state.date, title: action.payload.toUpperCase() };\n\t\t\tstate.list.push(newItem);\n\t\t\tlocalStorage.setItem('list', JSON.stringify(state.list));\n\t\t},\n\t\tfilteredList: (state, action) => {\n\t\t\tconst filtered = state.list.filter((item) => item.date.toString() === action.payload.toString());\n\t\t\tconsole.log('filtered from reducer:', state.filtered);\n\t\t\tconsole.log('date list from reducer:', state.dateList);\n\t\t},\n\t\tremoveItem: (state, action) => {\n\t\t\tstate.list = state.list.filter((item) => item.id !== action.payload);\n\t\t\tlocalStorage.setItem('list', JSON.stringify(state.list));\n\t\t},\n\t\teditItem: (state, action) => {\n      console.log('edited from redux', action.payload)\n\t\t\tconst find = state.list.find((item) => (\n       item.id == action.payload.id ? item.title = action.payload.title: null,\n       localStorage.setItem('list', JSON.stringify(state.list))\n      ));\n\t\t\t\n\t\t}\n\t}\n});\n\nexport const { changeDate, addItem, filteredList, removeItem, editItem } = dateSlice.actions;\n\nexport const selectDate = (state) => state.date.date;\nexport const selectList = (state) => state.date.list;\nexport const selectFiltered = (state) => state.date.filtered;\n\nexport default dateSlice.reducer;\n","import React from 'react';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './Calendar.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectDate, selectList } from '../../features/dateSlice';\nimport { changeDate, filteredList } from '../../features/dateSlice';\n//import FilteredList from '../FilteredList/FilteredList';\n\nfunction CalendarPicker() {\n\tconst dispatch = useDispatch();\n\tconst date = useSelector(selectDate);\n\tconst list = useSelector(selectList);\n\t//const dateList = useSelector(selectDateList);\n\t//const [date, setDate] = useState(new Date());\n\n\tconst onChange = (newDate) => {\n\t\tdispatch(changeDate(newDate));\n\t\t//dispatch(filteredList(newDate))\n\t\t//alert(`Clicked day:  ${date}`)\n\t\t//console.log('change day list', dateList)\n\t};\n\n\tconst handleDateSelect = (date, event) => {\n\t\tdispatch(filteredList(date));\n\t\t//console.log('change day list', dateList)\n\t\t//alert(`Clicked day:  ${date}`)\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t{/*<DatePicker selected={date} onChange={date => onChange(date)} onSelect={date => handleDateSelect(date)} dateFormat=\"yyyy/MM/dd\"/>*/}\n\t\t\t<Calendar onChange={onChange} onClickDay={handleDateSelect} className=\"calendar\" value={date} />\n\t\t\t{console.log(date)}\n\t\t\t{console.log(list)}\n\t\t\t<div />\n\t\t</div>\n\t);\n}\n\nexport default CalendarPicker;\n","import React, { useState, useEffect } from 'react';\nimport './Motto.css';\n\nfunction Motto() {\n    const [quote, setquote] = useState([])\n    const [title, setTitle] = useState('')\n    const [author, setAuthor] = useState('')\n    useEffect(() => {\n        const fetchMotto = async () => \n        await fetch ('https://type.fit/api/quotes')\n        .then(res => res.json())\n        .then(data => {\n            const randomObject = (data[Math.floor(Math.random() * data.length)])\n            setquote(Object.values(randomObject));\n            //setquote(data[Math.floor(Math.random() * data.length)].text)\n        })\n       \n        fetchMotto();\n    },[])\n    console.log('quote', quote)\n    return quote\n}\n\nexport default Motto;\n","import React from 'react';\nimport './Banner.css';\nimport CalendarPicker from '../../components/Calendar/CalendarPicker';\nimport Motto from '../Motto/Motto';\n\nfunction Banner() {\n    const quote = Motto();\n    //const title = Motto();\n    //const author = Motto()\n\treturn (\n\t\t<div className=\"banner\">\n\t\t\t<div className=\"banner__left\">\n\t\t\t\t<CalendarPicker />\n\t\t\t</div>\n\t\t\t<div className=\"banner__right\">\n\t\t\t\t<h2>{quote[0]}</h2>\n                <h2>{quote[1]}</h2>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Banner;\n","import React, { useState, forwardRef } from 'react';\nimport './Item.css';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { useDispatch } from 'react-redux';\nimport { removeItem, editItem } from '../../features/dateSlice';\nimport { useSpring, animated } from 'react-spring';\nimport { ListItemText } from '@material-ui/core';\n\n//function Item ({ id, title, item }) {\n\tconst Item = forwardRef(({id, title, item}, ref) => {\t\nconst dispatch = useDispatch();\n\tconst [ done, setDone ] = useState(false);\n\tconst [ edit, setEdit ] = useState(false);\n\tconst [ input, setInput ] = useState('');\n\n\tconst toggleHandler = () => {\n\t\tsetDone(!done);\n\t};\n\n\tconst removeHandler = (id) => {\n\t\tdispatch(removeItem(id));\n\t\tconsole.log(id);\n\t};\n\n\tconst itemAdd = useSpring({\n\t\tfrom: { marginTop: -100 },\n\t\tto: { marginTop: 0 }\n\t});\n\n\tconst editHandlerOpen = (input) => {\n\t\tsetEdit(!edit);\n\t\tconsole.log('item', item);\n\t\tdispatch(editItem({ ...item, title: input.toUpperCase() }));\n\t\tconsole.log(item);\n\t};\n\n\tconst editInputHandler = (e) => {\n\t\tsetInput(e.target.value);\n\t\te.preventDefault();\n\t};\n\n\treturn (\n\t\t<div className=\"item\" style={itemAdd} ref={ref}>\n\t\t\t<div className={done === false ? 'item__title' : 'item__titleDone'}>\n\t\t\t\t{edit ? (\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"click here...\"\n\t\t\t\t\t\tonChange={editInputHandler}\n\t\t\t\t\t\tclassName=\"item__input\"\n\t\t\t\t\t/>\n\t\t\t\t) : (\n\t\t\t\t\t<h2>{title}</h2>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<div className=\"item__icons\">\n\t\t\t\t<button>\n\t\t\t\t\t{done === false ? (\n\t\t\t\t\t\t<CheckBoxOutlineBlankIcon onClick={toggleHandler} />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<CheckBoxIcon onClick={toggleHandler} />\n\t\t\t\t\t)}\n\t\t\t\t</button>\n\t\t\t\t{done === false ? (\n\t\t\t\t\t<button onClick={() => editHandlerOpen(input)}>{edit ? 'update' : <EditIcon />}</button>\n\t\t\t\t) : (\n\t\t\t\t\t<button disabled=\"true\">\n\t\t\t\t\t\t<EditIcon />\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\n\t\t\t\t<button>\n\t\t\t\t\t<DeleteIcon onClick={() => removeHandler(id)} />\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\t)\n\nexport default Item;\n","import React from 'react';\nimport './List.css';\nimport Item from './../Item/Item';\nimport { selectList } from '../../features/dateSlice';\nimport { useSelector } from 'react-redux';\nimport FlipMove from 'react-flip-move';\n\nfunction List() {\n\tconst list = useSelector(selectList);\n\treturn (\n\t\t<div className=\"list\">\n\t\t\t<FlipMove>{list.map((item) => <Item title={item.title} id={item.id} item={item} />)}</FlipMove>\n\t\t</div>\n\t);\n}\n\nexport default List;\n","import React, { useState } from 'react';\r\nimport Banner from './components/Banner/Banner';\r\nimport './App.css';\r\nimport List from './components/List/List';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addItem } from './features/dateSlice';\r\n//import FilteredList from './components/FilteredList/FilteredList';\r\n\r\nfunction App() {\r\n\tconst [ input, setInput ] = useState('');\r\n\tconst dispatch = useDispatch();\r\n\r\n\tconst handleInput = (e) => {\r\n\t\tsetInput(e.target.value);\r\n\t\te.preventDefault();\r\n\t};\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\tdispatch(addItem(input));\r\n\t\tconsole.log('input from input:', input);\r\n\t\tsetInput('');\r\n\t\te.preventDefault();\r\n\t};\r\n\r\n\tconst handleAlert = () => {\r\n\t\talert('Nothing to add');\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"app\">\r\n\t\t\t<div className=\"app__content\">\r\n\t\t\t\t<Banner />\r\n\t\t\t\t<div className=\"app__calendar\">\r\n\t\t\t\t\t<div className=\"app__calendar__form\">\r\n\t\t\t\t\t\t<form className=\"app__calendar__formTag\">\r\n\t\t\t\t\t\t\t<input type=\"text\" onChange={handleInput} value={input} placeholder=\"Add todo.....\" />\r\n\t\t\t\t\t\t\t{input.length === 0 ? (\r\n\t\t\t\t\t\t\t\t<button onClick={handleAlert}>ADD</button>\r\n\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t<button type=\"submit\" onClick={handleSubmit}>\r\n\t\t\t\t\t\t\t\t\tADD\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"app__todos\">\r\n\t\t\t\t\t<div className=\"app__todos__list\">\r\n\t\t\t\t\t\t<h2>All todos</h2>\r\n\t\t\t\t\t\t<List />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport dateReducer from '../features/dateSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    date: dateReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}