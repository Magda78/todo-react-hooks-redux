{"version":3,"sources":["features/dateSlice.js","components/Calendar/CalendarPicker.js","components/Motto/Motto.js","components/Banner/Banner.js","components/Item/Item.js","components/List/List.js","components/Warning/Warning.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["initialList","localStorage","getItem","JSON","parse","initialFilteredList","filter","item","Date","date","toLocaleDateString","dateSlice","createSlice","name","initialState","list","filtered","afterRemove","editoo","reducers","changeDate","state","action","payload","addItem","newItem","id","uuid","title","toUpperCase","push","setItem","stringify","filteredList","removeItem","editItem","find","actions","selectDate","selectFiltered","CalendarPicker","dispatch","useDispatch","useSelector","onChange","newDate","onClickDay","className","value","Motto","useState","quote","setquote","useEffect","a","fetch","then","res","json","data","randomObject","Math","floor","random","length","Object","values","fetchMotto","Banner","author","Item","forwardRef","ref","done","setDone","edit","setEdit","input","setInput","inputEdit","useRef","toggleHandler","type","placeholder","e","current","preventDefault","onClick","editHandlerOpen","disabled","removeHandler","List","map","Warning","App","error","setError","userInput","setTimeout","console","log","configureStore","reducer","dateReducer","middleware","getDefaultMiddleware","serializableCheck","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9fb3b7dc.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport { v4 as uuid } from 'uuid';\n\nconst initialList = localStorage.getItem('list') ? JSON.parse(localStorage.getItem('list')) : [];\n\nconst initialFilteredList = initialList.filter((item) => {\n\treturn new Date(item.date).toLocaleDateString('en-GB') === new Date().toLocaleDateString('en-GB');\n});\n\nexport const dateSlice = createSlice({\n\tname: 'date',\n\tinitialState: {\n\t\tdate: new Date(),\n\t\tlist: initialList,\n\t\tfiltered: initialFilteredList,\n\t\tafterRemove: [],\n\t\teditoo: []\n\t},\n\treducers: {\n\t\tchangeDate: (state, action) => {\n\t\t\tstate.date = action.payload;\n\t\t},\n\t\taddItem: (state, action) => {\n\t\t\tconst newItem = { id: uuid(), date: state.date, title: action.payload.toUpperCase() };\n\t\t\tstate.list.push(newItem);\n\t\t\tstate.filtered.push(newItem);\n\t\t\tlocalStorage.setItem('list', JSON.stringify(state.list));\n\t\t},\n\t\tfilteredList: (state, action) => {\n\t\t\tstate.filtered = state.list.filter((item) => {\n\t\t\t\treturn (\n\t\t\t\t\tnew Date(item.date).toLocaleDateString('en-GB') ===\n\t\t\t\t\tnew Date(action.payload).toLocaleDateString('en-GB')\n\t\t\t\t);\n\t\t\t});\n\t\t},\n\t\tremoveItem: (state, action) => {\n\t\t\tstate.list = state.list.filter((item) => item.id !== action.payload);\n\t\t\tstate.filtered = state.filtered.filter((item) => item.id !== action.payload);\n\t\t\tlocalStorage.setItem('list', JSON.stringify(state.list));\n\t\t},\n\t\teditItem: (state, action) => {\n\t\t\tconst find = state.list.find(\n\t\t\t\t(item) => (\n\t\t\t\t\titem.id === action.payload.id ? (item.title = action.payload.title) : null,\n\t\t\t\t\tlocalStorage.setItem('list', JSON.stringify(state.list))\n\t\t\t\t)\n\t\t\t);\n\t\t\tconst findFiltered = state.filtered.find(\n\t\t\t\t(item) => (item.id === action.payload.id ? (item.title = action.payload.title) : null)\n\t\t\t);\n\t\t}\n\t}\n});\n\nexport const { changeDate, addItem, filteredList, removeItem, editItem } = dateSlice.actions;\n\nexport const selectDate = (state) => state.date.date;\nexport const selectList = (state) => state.date.list;\nexport const selectFiltered = (state) => state.date.filtered;\n\nexport default dateSlice.reducer;\n","import React from 'react';\nimport Calendar from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\nimport './Calendar.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectDate } from '../../features/dateSlice';\nimport { changeDate, filteredList } from '../../features/dateSlice';\n\nfunction CalendarPicker() {\n\tconst dispatch = useDispatch();\n\tconst date = useSelector(selectDate);\n\n\tconst onChange = (newDate) => {\n\t\tdispatch(changeDate(newDate));\n\t};\n\n\tconst handleDateSelect = (date) => {\n\t\tdispatch(filteredList(date));\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<Calendar onChange={onChange} onClickDay={handleDateSelect} className=\"calendar\" value={date} />\n\t\t\t<div />\n\t\t</div>\n\t);\n}\n\nexport default CalendarPicker;\n","import React, { useState, useEffect } from 'react';\nimport './Motto.css';\n\nfunction Motto() {\n    const [quote, setquote] = useState([])\n    useEffect(() => {\n        const fetchMotto = async () => \n        await fetch ('https://type.fit/api/quotes')\n        .then(res => res.json())\n        .then(data => {\n            const randomObject = (data[Math.floor(Math.random() * data.length)])\n            setquote(Object.values(randomObject));\n        })\n       \n        fetchMotto();\n    },[])\n    return quote\n}\n\nexport default Motto;\n","import React from 'react';\nimport './Banner.css';\nimport CalendarPicker from '../../components/Calendar/CalendarPicker';\nimport Motto from '../Motto/Motto';\n\nfunction Banner() {\n\tconst [title, author] = Motto()\n\treturn (\n\t\t<div className=\"banner\">\n\t\t\t<div className=\"banner__left\">\n\t\t\t\t<CalendarPicker />\n\t\t\t</div>\n\t\t\t<div className=\"banner__right\">\n\t\t\t\t<h2>{title}</h2>\n                <h2>{author}</h2>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Banner;\n","import React, { useState, forwardRef, useRef } from 'react';\nimport './Item.css';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport EditIcon from '@material-ui/icons/Edit';\nimport { useDispatch } from 'react-redux';\nimport { removeItem, editItem } from '../../features/dateSlice';\nimport CheckIcon from '@material-ui/icons/Check';\n\n//function Item ({ id, title, item }) {\nconst Item = forwardRef(({ id, title, item }, ref) => {\n\tconst dispatch = useDispatch();\n\tconst [ done, setDone ] = useState(false);\n\tconst [ edit, setEdit ] = useState(false);\n\tconst [ input, setInput ] = useState(title);\n\tconst inputEdit = useRef('');\n\n\tconst toggleHandler = () => {\n\t\tsetDone(!done);\n\t};\n\n\tconst removeHandler = (id) => {\n\t\tdispatch(removeItem(id));\n\t};\n\n\tconst editHandlerOpen = (input) => {\n\t\tdispatch(editItem({ ...item, title: input.toUpperCase() }));\n\t\tsetEdit(!edit);\n\t};\n\n\tconst editInputHandler = (e) => {\n\t\tsetInput(inputEdit.current.value);\n\t\te.preventDefault();\n\t};\n\n\treturn (\n\t\t<div className=\"item\" ref={ref}>\n\t\t\t<div className={done === false ? 'item__title' : 'item__titleDone'}>\n\t\t\t\t{edit ? (\n\t\t\t\t\t<input\n\t\t\t\t\t\tref={inputEdit}\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"click here...\"\n\t\t\t\t\t\tonChange={editInputHandler}\n\t\t\t\t\t\tclassName=\"item__input\"\n\t\t\t\t\t\tvalue={input}\n\t\t\t\t\t/>\n\t\t\t\t) : (\n\t\t\t\t\t<h2>{title}</h2>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t\t<div className=\"item__icons\">\n\t\t\t\t<button>\n\t\t\t\t\t{done === false ? (\n\t\t\t\t\t\t<CheckBoxOutlineBlankIcon onClick={toggleHandler} />\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<CheckBoxIcon onClick={toggleHandler} />\n\t\t\t\t\t)}\n\t\t\t\t</button>\n\t\t\t\t{done === false ? (\n\t\t\t\t\t<button onClick={() => editHandlerOpen(input)}>{edit ? <CheckIcon /> : <EditIcon />}</button>\n\t\t\t\t) : (\n\t\t\t\t\t<button disabled=\"true\">\n\t\t\t\t\t\t<EditIcon />\n\t\t\t\t\t</button>\n\t\t\t\t)}\n\n\t\t\t\t<button>\n\t\t\t\t\t<DeleteIcon onClick={() => removeHandler(id)} />\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n});\n\nexport default Item;\n","import React from 'react';\nimport './List.css';\nimport Item from './../Item/Item';\nimport { selectFiltered } from '../../features/dateSlice';\nimport { useSelector } from 'react-redux';\nimport FlipMove from 'react-flip-move';\n\nfunction List() {\n\tconst list = useSelector(selectFiltered);\n\treturn (\n\t\t<div className=\"list\">\n\t\t\t<FlipMove>{list.map((item) => <Item key={item.id} title={item.title} id={item.id} item={item} />)}</FlipMove>\n\t\t</div>\n\t);\n}\n\nexport default List;\n","import React from 'react';\nimport './Warning.css';\nimport WarningIcon from '@material-ui/icons/Warning';\n\nfunction Warning() {\n\treturn (\n\t\t<div className=\"warning\">\n\t\t\t<div className=\"warning__info\">\n\t\t\t\t<WarningIcon />\n\t\t\t\t<p>Input field can't be empty</p>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Warning;\n","import React, { useState, useRef } from 'react';\r\nimport Banner from './components/Banner/Banner';\r\nimport './App.css';\r\nimport List from './components/List/List';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addItem } from './features/dateSlice';\r\nimport Warning from './components/Warning/Warning';\r\n\r\nfunction App() {\r\n\tconst [ input, setInput ] = useState('');\r\n\tconst [ error, setError ] = useState(false);\r\n\tconst dispatch = useDispatch();\r\n\tconst userInput = useRef('');\r\n\r\n\tconst handleInput = (e) => {\r\n\t\tsetInput(userInput.current.value);\r\n\t\te.preventDefault();\r\n\t};\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\tif (input.length === 0) {\r\n\t\t\tsetError(true);\r\n\t\t\tsetTimeout(() => {\r\n\t\t\t\tsetError(false);\r\n\t\t\t}, 2000);\r\n\t\t} else {\r\n\t\t\tdispatch(addItem(input));\r\n\t\t\tconsole.log('input from input:', input);\r\n\t\t}\r\n\t\tsetInput('');\r\n\t\te.preventDefault();\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className=\"app\">\r\n\t\t\t\r\n\t\t\t<div className=\"app__content\">\r\n\t\t\t\t<Banner />\r\n\t\t\t\t<div className=\"app__calendar\">\r\n\t\t\t\t\t<div className=\"app__calendar__form\">\r\n\t\t\t\t\t\t<form className=\"app__calendar__formTag\">\r\n\t\t\t\t\t\t\t<input\r\n\t\t\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\t\t\tonChange={handleInput}\r\n\t\t\t\t\t\t\t\tvalue={input}\r\n\t\t\t\t\t\t\t\tplaceholder=\"Add todo.....\"\r\n\t\t\t\t\t\t\t\tref={userInput}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<button type=\"submit\" onClick={handleSubmit}>\r\n\t\t\t\t\t\t\t\tADD\r\n\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t{error && <Warning />}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"app__todos\">\r\n\t\t\t\t\t<div className=\"app__todos__list\">\r\n\t\t\t\t\t\t<h2>All todos</h2>\r\n\t\t\t\t\t\t<List />\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport dateReducer from '../features/dateSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    date: dateReducer,\r\n  },\r\n  middleware: (getDefaultMiddleware) => {\r\n    getDefaultMiddleware({\r\n      serializableCheck: false,\r\n    })\r\n  }\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}